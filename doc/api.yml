openapi: 3.0.3
info:
  version: 'latest'
  title: KotiKota

servers:
  - url: 'http://13.39.144.179:3000'
security:
  - BearerAuth: [ ]

paths:
  '/whoami':
    get:
      tags:
        - Security
      description: tells you who you are
      operationId: whoami
      responses:
        "200":
          description: your identity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
  /users:
    get:
      tags:
        - Users
      summary: get all users
      operationId: getAllUsers
      responses:
        200:
          description: the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
    put:
      security:
        [ ]
      tags:
        - Users
      summary: CreateUser
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}:
    get:
      tags:
        - Users
      summary: getUserById
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}/profile:
    put:
      tags:
        - Users
      summary: update user profile
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'
    UserProfile:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    User:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfile"
      allOf:
        - $ref: "#/components/schemas/CreateUser"

    CreateUser:
      type: object
      properties:
        id:
          type: string
        firebaseId:
          type: string

