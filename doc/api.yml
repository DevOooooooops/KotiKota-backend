openapi: 3.0.3
info:
  version: 'latest'
  title: KotiKota

servers:
  - url: 'http://192.168.0.245:8080'
security:
  - BearerAuth: [ ]

paths:
  /hello:
    get:
      security:
        [ ]
      tags:
        - Health
      operationId: greet
      responses:
        200:
          description: health check greets you
          content:
            text/plain:
              schema:
                type: string
                example: "Hello"
  /whoami:
    get:
      tags:
        - Security
      description: tells you who you are
      operationId: whoami
      responses:
        "200":
          description: your identity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
  /users:
    get:
      tags:
        - Users
      summary: get all users
      operationId: getAllUsers
      responses:
        200:
          description: the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
    put:
      security:
        [ ]
      tags:
        - Users
      summary: CreateUser
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}:
    get:
      tags:
        - Users
      summary: getUserById
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}/profile:
    put:
      tags:
        - Users
      summary: update user profile
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}/deposits:
    post:
      tags:
        - Users
      summary: deposit a certain amount to your kotikota account
      operationId: deposit
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Money"
      responses:
        200:
          description: the user with an updated balance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}/contributed-projects:
    get:
      tags:
        - Projects
      summary: get all projects you donated some money on
      operationId: getContributedProjects
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: them projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /projects:
    get:
      tags:
        - Projects
      security: [ ]
      summary: Get the list of all projects
      operationId: getAllProjects
      parameters:
        - in: query
          name: ownerId
          description: Filter projects by ownerId
          schema:
            type: string
        - in: query
          name: name
          description: Filter projects by name
          schema:
            type: string
        - in: query
          name: status
          description: Filter projects by ProjectStatus
          schema:
            $ref: "#/components/schemas/ProjectStatus"
        - in: query
          name: health
          description: Filter projects by ProjectHealth
          schema:
            $ref: "#/components/schemas/ProjectHealth"
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/Page'
        - in: query
          name: pageSize
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: List of existing projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /users/{userId}/projects:
    put:
      tags:
        - Projects
      summary: Create or update projects
      operationId: crupdateProjects
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProject'
      responses:
        200:
          description: The created projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get a specific project by id
      operationId: getProjectById
      security: [ ]
      parameters:
        - name: projectId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /projects/{projectId}/contributors:
    get:
      tags:
        - Projects
      summary: Get list of contributors on a specific project
      operationId: getProjectContributors
      security: [ ]
      parameters:
        - name: projectId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of contributors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectContributors'
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"

  /projects/{projectId}/comments:
    get:
      tags:
        - Projects
      summary: show comments on a project
      operationId: getProjectComments
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: the comments on a project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectComment"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Projects
      summary: comment out a project
      operationId: commentProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectComment"
      responses:
        200:
          description: The comments made on the project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectComment"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /projects/{projectId}/donations:
    get:
      tags:
        - Projects
      summary: get all donations made on a project
      security: [ ]
      operationId: getDonationsByProjectId
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: source
          in: query
          required: false
          schema:
            type: string
        - name: beginDate
          in: query
          schema:
            type: string
            format: date
          required: false
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: The donations made on the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectDonation"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Projects
      summary: donate some money to a project
      operationId: donate
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateProjectDonation"
      responses:
        200:
          description: The created donations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectDonation"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'
    UserProfile:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        birthdate:
          type: string
          format: date
        profile_picture:
          type: string
    User:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfile"
        bankInfo:
          $ref: "#/components/schemas/BankInfo"
      allOf:
        - $ref: "#/components/schemas/CreateUser"
    CreateUser:
      type: object
      properties:
        id:
          type: string
        firebaseId:
          type: string
    ProjectStatus:
      type: string
      enum:
        - OPEN
        - CLOSE
    ProjectHealth:
      type: string
      enum:
        - SUCCESS
        - FAILED
        - IN_PROGRESS
    BankInfo:
      type: object
      properties:
        amount:
          type: integer
    Money:
      type: object
      properties:
        amount:
          type: integer
    CreateProject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        targetAmount:
          type: integer
        deadline:
          type: string
          format: date-time
        ownerId:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'
        health:
          $ref: '#/components/schemas/ProjectHealth'
        logo:
          type: string
          description: the base64 encoded image
    Project:
      allOf:
        - $ref: "#/components/schemas/CreateProject"
      properties:
        totalDonations:
          type: integer
        collectedAmount:
          type: integer
    CreateProjectDonation:
      type: object
      properties:
        amount:
          type: integer
          format: int32
          description: realAmount times 100 to avoid floating points
        source:
          type: string
          description: userId of the donator
        destination:
          type: string
          description: projectId of the receiver project
        reason:
          type: string
    ProjectDonation:
      allOf:
        - $ref: "#/components/schemas/CreateProjectDonation"
      properties:
        id:
          type: string
        creationDatetime:
          type: string
          format: date-time
    ProjectComment:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        note:
          type: integer
          maximum: 5
          minimum: 0
        authorId:
          type: string
        content:
          type: string
        creationDatetime:
          type: string
          format: date-time
    Contributor:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        donation_amount:
          type: integer
          format: int32
    ProjectContributors:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
        contributors:
          type: array
          items:
            $ref: '#/components/schemas/Contributor'
